AWSTemplateFormatVersion: '2010-09-09'
Description: >-
  Plantilla de CloudFormation actualizada para crear una VPC con subredes públicas y privadas
  en dos Zonas de Disponibilidad, un NAT Gateway, un Internet Gateway y dos
  servidores web (uno en cada AZ pública) configurados según especificaciones.

Parameters:
  InstanceType:
    Description: Tipo de instancia EC2 para los servidores web.
    Type: String
    Default: t2.micro
    AllowedValues:
      - t2.micro
      - t2.small
      - t3.micro
      - t3.small
    ConstraintDescription: Debe ser un tipo de instancia válido.

  KeyName:
    Description: Nombre de un par de claves EC2 existente para permitir el acceso SSH a las instancias.
    Type: AWS::EC2::KeyPair::KeyName
    Default: vockey 
    ConstraintDescription: Debe ser el nombre de un par de claves EC2 existente.

  SSHLocation:
    Description: El rango de IP para el acceso SSH a los servidores web.
    Type: String
    MinLength: '9'
    MaxLength: '18'
    Default: 0.0.0.0/0
    AllowedPattern: '(\d{1,3})\.(\d{1,3})\.(\d{1,3})\.(\d{1,3})/(\d{1,2})'
    ConstraintDescription: Debe ser un rango CIDR IP válido con formato x.x.x.x/x.

Resources:
  # VPC
  VPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: 10.0.0.0/16
      EnableDnsSupport: true
      EnableDnsHostnames: true
      Tags:
        - Key: Name
          Value: VPCACR

  # Internet Gateway
  InternetGateway:
    Type: AWS::EC2::InternetGateway
    Properties:
      Tags:
        - Key: Name
          Value: MiInternetGateway

  AttachGateway:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      VpcId: !Ref VPC
      InternetGatewayId: !Ref InternetGateway

  # Subredes en Zona de Disponibilidad A
  PublicSubnet1: # AZ A
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      AvailabilityZone: us-east-1a
      CidrBlock: 10.0.0.0/24
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: SubredPublica1-AZ-A

  PrivateSubnet1: # AZ A
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      AvailabilityZone: us-east-1a
      CidrBlock: 10.0.1.0/24
      Tags:
        - Key: Name
          Value: SubredPrivada1-AZ-A

  # Subredes en Zona de Disponibilidad B
  PublicSubnet2: # AZ B
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      AvailabilityZone: us-east-1b
      CidrBlock: 10.0.2.0/24
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: SubredPublica2-AZ-B

  PrivateSubnet2: # AZ B
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      AvailabilityZone: us-east-1b
      CidrBlock: 10.0.3.0/24
      Tags:
        - Key: Name
          Value: SubredPrivada2-AZ-B

  # NAT Gateway (en PublicSubnet1 - AZ A)
  EIPForNATGateway:
    Type: AWS::EC2::EIP
    DependsOn: AttachGateway
    Properties:
      Domain: vpc

  NATGateway:
    Type: AWS::EC2::NatGateway
    Properties:
      AllocationId: !GetAtt EIPForNATGateway.AllocationId
      SubnetId: !Ref PublicSubnet1 # NAT Gateway en la subred pública de AZ A
      Tags:
        - Key: Name
          Value: MiNATGateway

  # Tablas de Enrutamiento
  PublicRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: TablaEnrutamientoPublica

  PublicRoute:
    Type: AWS::EC2::Route
    DependsOn: AttachGateway
    Properties:
      RouteTableId: !Ref PublicRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref InternetGateway

  PublicSubnet1RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PublicSubnet1
      RouteTableId: !Ref PublicRouteTable

  PublicSubnet2RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PublicSubnet2
      RouteTableId: !Ref PublicRouteTable

  PrivateRouteTable1: # Tabla de enrutamiento privada para AZ A
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: TablaEnrutamientoPrivada-AZ-A

  PrivateRoute1: # Ruta para la tabla privada de AZ A hacia el NAT Gateway
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref PrivateRouteTable1
      DestinationCidrBlock: 0.0.0.0/0
      NatGatewayId: !Ref NATGateway

  PrivateSubnet1RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PrivateSubnet1
      RouteTableId: !Ref PrivateRouteTable1
  
  # Se necesita una segunda tabla de rutas privadas y una segunda NAT Gateway si se quiere alta disponibilidad para las subredes privadas en AZ B.
  # Por simplicidad y siguiendo el patrón del script original que tenía un solo NAT Gateway,
  # las instancias en PrivateSubnet2 también usarán el NATGateway en PublicSubnet1.
  # Si se requiere que cada AZ privada tenga su propio NAT Gateway, se deberá crear un NATGateway2 en PublicSubnet2
  # y una PrivateRouteTable2 asociada a PrivateSubnet2 y enrutada a NATGateway2.
  # Por ahora, ambas subredes privadas usarán el mismo NAT Gateway.

  PrivateRouteTable2: # Tabla de enrutamiento privada para AZ B
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: TablaEnrutamientoPrivada-AZ-B

  PrivateRoute2: # Ruta para la tabla privada de AZ B hacia el NAT Gateway (el mismo NAT Gateway)
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref PrivateRouteTable2
      DestinationCidrBlock: 0.0.0.0/0
      NatGatewayId: !Ref NATGateway # Ambas subredes privadas usan el mismo NAT GW

  PrivateSubnet2RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PrivateSubnet2
      RouteTableId: !Ref PrivateRouteTable2

  # Grupo de Seguridad para los Servidores Web
  WebServerSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Habilita HTTP y SSH para los servidores web
      VpcId: !Ref VPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: 22
          ToPort: 22
          CidrIp: !Ref SSHLocation
      Tags:
        - Key: Name
          Value: GrupoSeguridadServidoresWeb

  # Servidor Web 1 (Instancia EC2 en AZ A)
  WebServerInstanceAZA:
    Type: AWS::EC2::Instance
    Properties:
      InstanceType: !Ref InstanceType
      KeyName: !Ref KeyName
      ImageId: !FindInMap [AWSRegionArch2AMI, !Ref "AWS::Region", AmazonLinux2023]
      IamInstanceProfile: LabInstanceProfile # Asegúrate que este perfil IAM exista y tenga los permisos necesarios
      NetworkInterfaces:
        - AssociatePublicIpAddress: true # IP pública para acceso directo
          DeviceIndex: '0'
          GroupSet:
            - !Ref WebServerSecurityGroup
          SubnetId: !Ref PublicSubnet1 # Desplegado en la Subred Pública 1 (AZ A)
      UserData:
        Fn::Base64: !Sub |
          #!/bin/bash
          # Script para instalar Apache en Amazon Linux 2023
          sudo dnf update -y
          sudo dnf install -y httpd
          sudo systemctl start httpd
          sudo systemctl enable httpd
          sudo mkdir -p /var/www/html
          echo "<html><head><title>Servidor Web AZ-A</title></head><body><h1>Apache funcionando en Amazon Linux 2023 - Instancia en AZ A (Subred Pública 1)</h1><p>Hostname: $(hostname -f)</p></body></html>" | sudo tee /var/www/html/index.html
          sudo chmod 755 /var/www/html/index.html
      Tags:
        - Key: Name
          Value: servidor-web-az-a

  # Servidor Web 2 (Instancia EC2 en AZ B)
  WebServerInstanceAZB:
    Type: AWS::EC2::Instance
    Properties:
      InstanceType: !Ref InstanceType
      KeyName: !Ref KeyName
      ImageId: !FindInMap [AWSRegionArch2AMI, !Ref "AWS::Region", AmazonLinux2023]
      IamInstanceProfile: LabInstanceProfile # Asegúrate que este perfil IAM exista y tenga los permisos necesarios
      NetworkInterfaces:
        - AssociatePublicIpAddress: true # IP pública para acceso directo
          DeviceIndex: '0'
          GroupSet:
            - !Ref WebServerSecurityGroup
          SubnetId: !Ref PublicSubnet2 # Desplegado en la Subred Pública 2 (AZ B)
      UserData:
        Fn::Base64: !Sub |
          #!/bin/bash
          # Script para instalar Apache en Amazon Linux 2023
          sudo dnf update -y
          sudo dnf install -y httpd
          sudo systemctl start httpd
          sudo systemctl enable httpd
          sudo mkdir -p /var/www/html
          echo "<html><head><title>Servidor Web AZ-B</title></head><body><h1>Apache funcionando en Amazon Linux 2023 - Instancia en AZ B (Subred Pública 2)</h1><p>Hostname: $(hostname -f)</p></body></html>" | sudo tee /var/www/html/index.html
          sudo chmod 755 /var/www/html/index.html
      Tags:
        - Key: Name
          Value: servidor-web-az-b # Nombre que tenía antes serverac1

Mappings:
  AWSRegionArch2AMI:
    us-east-1: 
      AmazonLinux2023: ami-0953476d60561c955 
    us-east-2:
      AmazonLinux2023: ami-0b28df96add676825 
    us-west-1:
      AmazonLinux2023: ami-0a1396f8d3aec6025 
    us-west-2:
      AmazonLinux2023: ami-0735b619969978559 
    eu-west-1:
      AmazonLinux2023: ami-08f8318a3da92a910 
    eu-central-1:
      AmazonLinux2023: ami-03d6d720797692439
    # Añade aquí las AMIs de Amazon Linux 2023 (x86, uefi-preferred) para otras regiones si es necesario.

Outputs:
  VPCId:
    Description: ID de la VPC creada
    Value: !Ref VPC
  PublicSubnet1Id:
    Description: ID de la Subred Pública 1 (AZ A)
    Value: !Ref PublicSubnet1
  PrivateSubnet1Id:
    Description: ID de la Subred Privada 1 (AZ A)
    Value: !Ref PrivateSubnet1
  PublicSubnet2Id:
    Description: ID de la Subred Pública 2 (AZ B)
    Value: !Ref PublicSubnet2
  PrivateSubnet2Id:
    Description: ID de la Subred Privada 2 (AZ B)
    Value: !Ref PrivateSubnet2
  
  WebServerInstanceAZAId:
    Description: ID de la instancia del Servidor Web en AZ A
    Value: !Ref WebServerInstanceAZA
  WebServerAZAPublicDNS:
    Description: Nombre DNS público del Servidor Web en AZ A
    Value: !GetAtt WebServerInstanceAZA.PublicDnsName
  WebServerAZAPublicIP:
    Description: Dirección IP pública del Servidor Web en AZ A
    Value: !GetAtt WebServerInstanceAZA.PublicIp

  WebServerInstanceAZBId:
    Description: ID de la instancia del Servidor Web en AZ B
    Value: !Ref WebServerInstanceAZB
  WebServerAZBPublicDNS:
    Description: Nombre DNS público del Servidor Web en AZ B
    Value: !GetAtt WebServerInstanceAZB.PublicDnsName
  WebServerAZBPublicIP:
    Description: Dirección IP pública del Servidor Web en AZ B
    Value: !GetAtt WebServerInstanceAZB.PublicIp

  NATGatewayEIP:
    Description: IP Elástica asignada al NAT Gateway
    Value: !Ref EIPForNATGateway
